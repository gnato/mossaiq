{"version":3,"sources":["components/GridItem/GridItem.js","components/Grid/Grid.js","components/GridConfig/styles.js","components/GridConfig/GridConfig.js","App.styles.js","App.js","serviceWorker.js","index.js"],"names":["GridItem","width","height","margin","content","useState","photo","setPhoto","crop","setCrop","image","useRef","useEffect","current","smartcrop","then","val","topCrop","className","style","marginRight","marginBottom","onDrop","e","dataTransfer","files","length","reader","FileReader","file","onloadend","result","readAsDataURL","src","ref","display","alt","transform","top","y","left","x","defaultProps","Grid","cols","colorBackground","items","render","onRenderComplete","colsVal","setColsVal","marginVal","setMarginVal","widthVal","setWidthVal","heightVal","setHeightVal","itemsVal","setItemsVal","colorBackgroundVal","setcolorBackgroundVal","refreshLayout","setTimeout","tmpItems","i","push","gridWrap","children","grid","add","refreshItems","layout","handleWindowDrop","event","preventDefault","gridOuter","Muuri","dragEnabled","dragPlaceholder","enabled","duration","createElement","item","getElement","cloneNode","on","synchronize","window","addEventListener","destroy","removeEventListener","html2canvas","canvas","a","document","href","toDataURL","replace","download","click","boxes","Array","keys","map","key","paddingTop","paddingLeft","background","makeStyles","theme","slider","spacing","formControl","sliders","label","name","min","max","default","unit","presets","values","GridConfig","onValuesChanged","classes","useStyles","valPreset","setValPreset","defaultValSliders","Object","fromEntries","valSliders","setValSliders","valColor","setValCoolor","FormControl","InputLabel","id","Select","labelId","value","onChange","target","preset","idx","MenuItem","Slider","aria-labelledby","step","valueLabelDisplay","marks","color","circleSize","hex","colors","root","appBar","transition","transitions","create","easing","sharp","leavingScreen","appBarShift","easeOut","enteringScreen","title","flexGrow","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","drawerBody","overflowY","contentShift","App","open","setOpen","setRender","gridConfig","setGridConfig","CssBaseline","AppBar","position","clsx","Toolbar","Typography","variant","noWrap","Tooltip","IconButton","disabled","onClick","edge","Drawer","anchor","paper","Divider","Boolean","location","hostname","match","messages","pl","messagesPl","en","messagesEn","language","navigator","split","ReactDOM","locale","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.43e67e60.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport smartcrop from \"smartcrop\";\r\n\r\nimport \"./style.scss\";\r\n\r\nconst GridItem = ({ width, height, margin, content }) => {\r\n  const [photo, setPhoto] = useState(null);\r\n  const [crop, setCrop] = useState(null);\r\n\r\n  const image = useRef();\r\n\r\n  const handleDrop = e => {\r\n    if (!e.dataTransfer || e.dataTransfer.files.length === 0) return;\r\n\r\n    const reader = new FileReader();\r\n    const file = e.dataTransfer.files[0];\r\n\r\n    reader.onloadend = () => {\r\n      setPhoto(reader.result);\r\n    };\r\n\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  const calculateScale = () => {\r\n    let scale = 100;\r\n\r\n    if (width >= height) {\r\n      scale = (width * 100) / crop.width;\r\n    } else {\r\n      scale = (height * 100) / crop.height;\r\n    }\r\n\r\n    return scale / 100;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!image.current) return;\r\n    smartcrop\r\n      .crop(image.current, { width, height })\r\n      .then(val => setCrop(val.topCrop));\r\n  }, [width, height, photo]);\r\n\r\n  return (\r\n    <div\r\n      className=\"item\"\r\n      style={{\r\n        width,\r\n        height,\r\n        marginRight: margin,\r\n        marginBottom: margin\r\n      }}\r\n    >\r\n      <div className=\"item-content\" onDrop={handleDrop}>\r\n        {photo && (\r\n          <img src={photo} ref={image} style={{ display: \"none\" }} alt=\"\" />\r\n        )}\r\n        {crop && (\r\n          <div\r\n            className=\"item-crop-wrap\"\r\n            style={{\r\n              width: crop.width,\r\n              height: crop.height,\r\n              transform: `scale(${calculateScale()})`\r\n            }}\r\n          >\r\n            <img\r\n              src={photo}\r\n              alt=\"\"\r\n              className=\"item-crop-img\"\r\n              style={{ top: crop.y * -1, left: crop.x * -1 }}\r\n            />\r\n          </div>\r\n        )}\r\n        {!photo && content}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nGridItem.propTypes = {\r\n  margin: PropTypes.number.isRequired,\r\n  width: PropTypes.number.isRequired,\r\n  height: PropTypes.number.isRequired,\r\n  content: PropTypes.string\r\n};\r\n\r\nGridItem.defaultProps = {\r\n  margin: 0,\r\n  width: 10,\r\n  height: 10\r\n};\r\n\r\nexport default GridItem;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Muuri from \"muuri\";\r\nimport html2canvas from \"html2canvas\";\r\n\r\nimport GridItem from \"../GridItem\";\r\n\r\nimport \"./style.scss\";\r\n\r\nconst Grid = ({\r\n  cols,\r\n  margin,\r\n  width,\r\n  height,\r\n  colorBackground,\r\n  items,\r\n  render,\r\n  onRenderComplete\r\n}) => {\r\n  // params\r\n  const [colsVal, setColsVal] = useState(cols);\r\n  const [marginVal, setMarginVal] = useState(margin);\r\n  const [widthVal, setWidthVal] = useState(width);\r\n  const [heightVal, setHeightVal] = useState(height);\r\n  const [itemsVal, setItemsVal] = useState(items);\r\n  const [colorBackgroundVal, setcolorBackgroundVal] = useState(colorBackground);\r\n\r\n  useEffect(() => {\r\n    setColsVal(cols);\r\n    refreshLayout();\r\n  }, [cols]);\r\n\r\n  useEffect(() => {\r\n    setMarginVal(margin);\r\n    refreshLayout();\r\n  }, [margin]);\r\n\r\n  useEffect(() => {\r\n    setWidthVal(width);\r\n    refreshLayout();\r\n  }, [width]);\r\n\r\n  useEffect(() => {\r\n    setHeightVal(height);\r\n    refreshLayout();\r\n  }, [height]);\r\n\r\n  useEffect(() => {\r\n    setItemsVal(items);\r\n\r\n    setTimeout(() => {\r\n      const tmpItems = [];\r\n      if (items > itemsVal) {\r\n        for (let i = itemsVal; i < items; i += 1) {\r\n          tmpItems.push(gridWrap.current.children[i]);\r\n        }\r\n        grid.current.add(tmpItems);\r\n      } else {\r\n        refreshLayout();\r\n      }\r\n    }, 0);\r\n  }, [items, itemsVal]);\r\n\r\n  useEffect(() => setcolorBackgroundVal(colorBackground), [colorBackground]);\r\n\r\n  const refreshLayout = () => {\r\n    if (typeof grid.current !== \"undefined\") {\r\n      setTimeout(() => {\r\n        grid.current.refreshItems();\r\n        grid.current.layout();\r\n      }, 0);\r\n    }\r\n  };\r\n\r\n  const handleWindowDrop = event => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  // muuri set\r\n  const grid = useRef();\r\n  const gridWrap = useRef();\r\n  const gridOuter = useRef();\r\n\r\n  useEffect(() => {\r\n    grid.current = new Muuri(gridWrap.current, {\r\n      dragEnabled: true,\r\n      dragPlaceholder: {\r\n        enabled: true,\r\n        duration: 400,\r\n        createElement: function(item) {\r\n          return item.getElement().cloneNode(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    // reload dom after sort\r\n    grid.current.on(\"dragReleaseEnd\", () => grid.current.synchronize());\r\n\r\n    // prevent default drop event\r\n    window.addEventListener(\"dragover\", handleWindowDrop);\r\n    window.addEventListener(\"drop\", handleWindowDrop);\r\n\r\n    return () => {\r\n      grid.destroy();\r\n      window.removeEventListener(\"dragover\", handleWindowDrop);\r\n      window.removeEventListener(\"drop\", handleWindowDrop);\r\n    };\r\n  }, []);\r\n\r\n  // render\r\n  useEffect(() => {\r\n    if (!render) return;\r\n\r\n    html2canvas(gridOuter.current).then(canvas => {\r\n      const a = document.createElement(\"a\");\r\n      a.href = canvas\r\n        .toDataURL(\"image/jpeg\")\r\n        .replace(\"image/jpeg\", \"image/octet-stream\");\r\n      a.download = `mossaiq.jpg`;\r\n      a.click();\r\n\r\n      onRenderComplete();\r\n    });\r\n  }, [render, onRenderComplete]);\r\n\r\n  // prepare boxes\r\n  const boxes = [...Array(itemsVal).keys()].map(item => (\r\n    <GridItem\r\n      key={item}\r\n      width={widthVal}\r\n      height={heightVal}\r\n      margin={marginVal}\r\n      content={`${item + 1}`}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        ref={gridOuter}\r\n        className=\"grid-outer\"\r\n        style={{\r\n          width: colsVal * widthVal + colsVal * marginVal + marginVal,\r\n          paddingTop: marginVal,\r\n          paddingLeft: marginVal,\r\n          background: colorBackgroundVal\r\n        }}\r\n      >\r\n        <div className=\"grid\" ref={gridWrap}>\r\n          {boxes}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nGrid.propTypes = {\r\n  cols: PropTypes.number.isRequired,\r\n  margin: PropTypes.number.isRequired,\r\n  width: PropTypes.number.isRequired,\r\n  height: PropTypes.number.isRequired,\r\n  items: PropTypes.number.isRequired,\r\n  colorBackground: PropTypes.string.isRequired,\r\n  render: PropTypes.bool,\r\n  onRenderComplete: PropTypes.func\r\n};\r\n\r\nGrid.defaultProps = {\r\n  cols: 1,\r\n  margin: 0,\r\n  width: 10,\r\n  height: 10,\r\n  items: 0,\r\n  colorBackground: \"#ddd\",\r\n  render: false,\r\n  onRenderComplete: () => {}\r\n};\r\n\r\nexport default Grid;\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport default makeStyles(theme => ({\r\n  slider: {\r\n    marginBottom: theme.spacing(1)\r\n  },\r\n  formControl: {\r\n    marginBottom: theme.spacing(4),\r\n    width: \"100%\"\r\n  }\r\n}));\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport { CirclePicker } from \"react-color\";\r\n\r\nimport useStyles from \"./styles\";\r\n\r\nconst defaultColor = \"#fff\";\r\nconst sliders = [\r\n  {\r\n    label: \"columns\",\r\n    name: \"cols\",\r\n    min: 1,\r\n    max: 10,\r\n    default: 4,\r\n    unit: \"px\"\r\n  },\r\n  {\r\n    label: \"margins\",\r\n    name: \"margin\",\r\n    min: 0,\r\n    max: 50,\r\n    default: 10,\r\n    unit: \"px\"\r\n  },\r\n  {\r\n    label: \"box-width\",\r\n    name: \"width\",\r\n    min: 50,\r\n    max: 500,\r\n    default: 100,\r\n    unit: \"px\"\r\n  },\r\n  {\r\n    label: \"box-height\",\r\n    name: \"height\",\r\n    min: 50,\r\n    max: 500,\r\n    default: 100,\r\n    unit: \"px\"\r\n  },\r\n  {\r\n    label: \"items-count\",\r\n    name: \"items\",\r\n    min: 1,\r\n    max: 50,\r\n    default: 8,\r\n    unit: \"\"\r\n  }\r\n];\r\n\r\nconst presets = [\r\n  {\r\n    name: \"120 x 600\",\r\n    values: { margin: 5, cols: 1, width: 110, height: 144, items: 4 }\r\n  },\r\n  {\r\n    name: \"300 x 250\",\r\n    values: { margin: 5, cols: 2, width: 142, height: 118, items: 4 }\r\n  },\r\n  {\r\n    name: \"300 x 600\",\r\n    values: { margin: 7, cols: 2, width: 140, height: 141, items: 8 }\r\n  },\r\n  {\r\n    name: \"750 x 100\",\r\n    values: { margin: 5, cols: 5, width: 144, height: 90, items: 5 }\r\n  },\r\n  {\r\n    name: \"750 x 200\",\r\n    values: { margin: 5, cols: 5, width: 144, height: 190, items: 5 }\r\n  }\r\n];\r\n\r\nconst GridConfig = ({ onValuesChanged = () => {} }) => {\r\n  const classes = useStyles();\r\n\r\n  // preset\r\n  const [valPreset, setValPreset] = useState(\"\");\r\n\r\n  const handleChangePreset = e => {\r\n    const val = e.target.value;\r\n    setValPreset(val);\r\n    setValSliders({ ...valSliders, ...presets[val].values });\r\n  };\r\n\r\n  // slides\r\n  const defaultValSliders = Object.fromEntries(\r\n    sliders.map(slider => [slider.name, slider.default])\r\n  );\r\n  const [valSliders, setValSliders] = useState(defaultValSliders);\r\n\r\n  const handleChangeSlider = (value, name) => {\r\n    if (valSliders[name] === value) return;\r\n\r\n    setValPreset(\"\");\r\n    setValSliders({ ...valSliders, [name]: value });\r\n  };\r\n\r\n  // colorpicker\r\n  const [valColor, setValCoolor] = useState(defaultColor);\r\n\r\n  // push changed values outside\r\n  useEffect(() => {\r\n    onValuesChanged({ ...valSliders, colorBackground: valColor });\r\n  }, [valSliders, valColor]);\r\n\r\n  return (\r\n    <>\r\n      <FormControl className={classes.formControl}>\r\n        <InputLabel id=\"select-preset-label\">\r\n          <FormattedMessage id=\"grid-config.presets\" />\r\n        </InputLabel>\r\n        <Select\r\n          labelId=\"select-preset-label\"\r\n          id=\"select-preset\"\r\n          value={valPreset}\r\n          onChange={handleChangePreset}\r\n        >\r\n          {presets.map((preset, idx) => (\r\n            <MenuItem key={idx} value={idx}>\r\n              {preset.name}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n\r\n      {sliders.map(slider => (\r\n        <div className={classes.slider} key={slider.name}>\r\n          <InputLabel>\r\n            <FormattedMessage id={`grid-config.${slider.label}`} />\r\n          </InputLabel>\r\n          <Slider\r\n            value={valSliders[slider.name]}\r\n            aria-labelledby=\"discrete-slider\"\r\n            step={1}\r\n            name={slider.name}\r\n            min={slider.min}\r\n            max={slider.max}\r\n            valueLabelDisplay=\"auto\"\r\n            onChange={(e, val) => handleChangeSlider(val, slider.name)}\r\n            marks={[\r\n              { value: slider.min, label: `${slider.min} ${slider.unit}` },\r\n              { value: slider.max, label: `${slider.max} ${slider.unit}` }\r\n            ]}\r\n          />\r\n        </div>\r\n      ))}\r\n\r\n      <InputLabel>\r\n        <FormattedMessage id=\"grid-config.color\" />\r\n      </InputLabel>\r\n      <br />\r\n      <CirclePicker\r\n        color={valColor}\r\n        width={\"100%\"}\r\n        circleSize={26}\r\n        onChange={color => setValCoolor(color.hex)}\r\n        colors={[\r\n          \"#f44336\",\r\n          \"#e91e63\",\r\n          \"#9c27b0\",\r\n          \"#673ab7\",\r\n          \"#3f51b5\",\r\n          \"#2196f3\",\r\n          \"#03a9f4\",\r\n          \"#00bcd4\",\r\n          \"#009688\",\r\n          \"#4caf50\",\r\n          \"#8bc34a\",\r\n          \"#cddc39\",\r\n          \"#ffeb3b\",\r\n          \"#ffc107\",\r\n          \"#ff9800\",\r\n          \"#ff5722\",\r\n          \"#795548\",\r\n          \"#607d8b\",\r\n          \"#ffffff\"\r\n        ]}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GridConfig;\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst drawerWidth = 350;\r\n\r\nexport default makeStyles(theme => ({\r\n  root: {\r\n    display: \"flex\"\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen\r\n    })\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen\r\n    }),\r\n    marginRight: drawerWidth\r\n  },\r\n  title: {\r\n    flexGrow: 1\r\n  },\r\n  hide: {\r\n    display: \"none\"\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth\r\n  },\r\n  drawerHeader: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    padding: theme.spacing(0, 1),\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: \"flex-start\"\r\n  },\r\n  drawerBody: {\r\n    overflowY: \"auto\",\r\n    padding: 25\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen\r\n    }),\r\n    marginRight: -drawerWidth\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen\r\n    }),\r\n    marginRight: 0\r\n  }\r\n}));\r\n","import React, { useState } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport clsx from \"clsx\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloudDownloadIcon from \"@material-ui/icons/CloudDownload\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nimport Grid from \"./components/Grid\";\nimport GridConfig from \"./components/GridConfig\";\n\nimport useStyles from \"./App.styles\";\n\nconst App = () => {\n  const classes = useStyles();\n\n  // drawer\n  const [open, setOpen] = useState(false);\n  const handleDrawerOpen = () => setOpen(true);\n  const handleDrawerClose = () => setOpen(false);\n\n  // render\n  const [render, setRender] = useState(false);\n\n  // grid config\n  const [gridConfig, setGridConfig] = useState({});\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open\n        })}\n      >\n        <Toolbar>\n          <Typography variant=\"h6\" noWrap className={classes.title}>\n            MossaIQ\n          </Typography>\n\n          <Tooltip title={<FormattedMessage id=\"app.render\" />}>\n            <IconButton\n              color=\"inherit\"\n              disabled={render}\n              onClick={() => setRender(true)}\n              className={clsx(open && classes.hide)}\n            >\n              <CloudDownloadIcon />\n            </IconButton>\n          </Tooltip>\n\n          <Tooltip title={<FormattedMessage id=\"app.grid-config\" />}>\n            <IconButton\n              color=\"inherit\"\n              edge=\"end\"\n              disabled={render}\n              onClick={handleDrawerOpen}\n              className={clsx(open && classes.hide)}\n            >\n              <SettingsIcon />\n            </IconButton>\n          </Tooltip>\n        </Toolbar>\n      </AppBar>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open\n        })}\n      >\n        <div className={classes.drawerHeader} />\n        <Grid\n          {...gridConfig}\n          render={render}\n          onRenderComplete={() => setRender(false)}\n        />\n      </main>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"right\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronRightIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            <FormattedMessage id=\"app.grid-config\" />\n          </Typography>\n        </div>\n        <Divider />\n        <div className={classes.drawerBody}>\n          <GridConfig onValuesChanged={setGridConfig} />\n        </div>\n      </Drawer>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { IntlProvider } from \"react-intl\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport messagesPl from \"./translations/pl.json\";\nimport messagesEn from \"./translations/en.json\";\n\nimport \"typeface-roboto\";\n\nconst defaultLang = \"en\";\nconst messages = {\n  pl: messagesPl,\n  en: messagesEn\n};\nconst language = navigator.language.split(/[-_]/)[0]; // language without region code\n\nReactDOM.render(\n  <IntlProvider\n    locale={language}\n    key={language}\n    messages={messages[language] || messages[defaultLang]}\n  >\n    <App />\n  </IntlProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}