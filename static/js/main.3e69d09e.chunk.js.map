{"version":3,"sources":["components/GridItem/GridItem.js","components/Grid/Grid.js","components/GridConfig/styles.js","components/GridConfig/GridConfig.js","App.styles.js","components/SlideSwitcher/SlideSwitcher.js","App.js","serviceWorker.js","index.js"],"names":["GridItem","width","height","margin","content","srcPhoto","srcCrop","onPhotoLoad","useState","photo","setPhoto","crop","setCrop","image","useRef","changeCrop","useCallback","current","smartcrop","then","val","topCrop","useEffect","className","style","marginRight","marginBottom","onDrop","e","dataTransfer","files","length","reader","FileReader","file","onloadend","result","readAsDataURL","src","ref","display","alt","transform","top","y","left","x","defaultProps","Grid","cols","colorBackground","items","render","srcPhotos","onRenderComplete","onPhotosChanged","colsVal","setColsVal","marginVal","setMarginVal","widthVal","setWidthVal","heightVal","setHeightVal","itemsVal","setItemsVal","colorBackgroundVal","setcolorBackgroundVal","photos","setPhotos","refreshLayout","setTimeout","tmpItems","i","push","gridWrap","children","grid","add","refreshItems","layout","handleWindowDrop","event","preventDefault","gridOuter","Muuri","dragEnabled","dragPlaceholder","enabled","duration","createElement","item","getElement","cloneNode","on","synchronize","window","addEventListener","destroy","removeEventListener","html2canvas","canvas","boxes","Array","keys","map","key","idx","newPhotos","handlePhotoLoad","paddingTop","paddingLeft","background","makeStyles","theme","slider","spacing","formControl","sliders","label","name","min","max","default","unit","presets","values","GridConfig","onValuesChanged","classes","useStyles","valPreset","setValPreset","defaultValSliders","Object","fromEntries","valSliders","setValSliders","valColor","setValCoolor","FormControl","InputLabel","id","Select","labelId","value","onChange","target","preset","MenuItem","Slider","aria-labelledby","step","valueLabelDisplay","marks","color","circleSize","hex","colors","root","appBar","transition","transitions","create","easing","sharp","leavingScreen","appBarShift","easeOut","enteringScreen","title","flexGrow","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","drawerBody","overflowY","contentShift","backdrop","zIndex","SlideSwitcher","currentSlide","countAllSlides","onAdd","onCopy","onDelete","onNext","onPrev","Tooltip","IconButton","disabled","onClick","GIFEncoder","require","SlideGrid","React","memo","gridConfig","prevProps","nextProps","obj1","obj2","every","App","open","setOpen","setRender","renderedItems","setRenderedItems","setGridConfig","gridPhotos","setGridPhotos","lastClonedId","setLastClonedId","setCurrentSlide","allSlides","setAllSlides","Date","now","slidesMapping","setSlidesMapping","insertClonedSlide","encoder","setRepeat","setDelay","start","forEach","addFrame","getContext","finish","templink","document","download","href","URL","createObjectURL","Blob","Uint8Array","out","data","type","click","slides","position","visibility","pointerEvents","handleRenderComplete","slideId","currentPhotos","handlePhotosChanged","CssBaseline","AppBar","clsx","Toolbar","Typography","variant","noWrap","newId","filter","slide","edge","Backdrop","CircularProgress","Drawer","anchor","paper","Divider","Boolean","location","hostname","match","messages","pl","messagesPl","en","messagesEn","language","navigator","split","ReactDOM","locale","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3e69d09e.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport smartcrop from \"smartcrop\";\r\n\r\nimport \"./style.scss\";\r\n\r\nconst GridItem = ({\r\n  width,\r\n  height,\r\n  margin,\r\n  content,\r\n  srcPhoto,\r\n  srcCrop,\r\n  onPhotoLoad\r\n}) => {\r\n  const [photo, setPhoto] = useState(srcPhoto);\r\n  const [crop, setCrop] = useState(srcCrop);\r\n\r\n  const image = useRef();\r\n\r\n  const handleDrop = e => {\r\n    if (!e.dataTransfer || e.dataTransfer.files.length === 0) return;\r\n\r\n    const reader = new FileReader();\r\n    const file = e.dataTransfer.files[0];\r\n\r\n    reader.onloadend = () => {\r\n      setPhoto(reader.result);\r\n    };\r\n\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  const calculateScale = () => {\r\n    let scale = 100;\r\n\r\n    if (width >= height) {\r\n      scale = (width * 100) / crop.width;\r\n    } else {\r\n      scale = (height * 100) / crop.height;\r\n    }\r\n\r\n    return scale / 100;\r\n  };\r\n\r\n  const changeCrop = useCallback(() => {\r\n    if (!image.current) return;\r\n    smartcrop.crop(image.current, { width, height }).then(val => {\r\n      setCrop(val.topCrop);\r\n      onPhotoLoad(photo, crop);\r\n    });\r\n  }, [width, height, photo, crop, onPhotoLoad]);\r\n\r\n  useEffect(changeCrop, [width, height, photo]);\r\n\r\n  return (\r\n    <div\r\n      className=\"item\"\r\n      style={{\r\n        width,\r\n        height,\r\n        marginRight: margin,\r\n        marginBottom: margin\r\n      }}\r\n    >\r\n      <div className=\"item-content\" onDrop={handleDrop}>\r\n        {photo && (\r\n          <img src={photo} ref={image} style={{ display: \"none\" }} alt=\"\" />\r\n        )}\r\n        {crop && (\r\n          <div\r\n            className=\"item-crop-wrap\"\r\n            style={{\r\n              width: crop.width,\r\n              height: crop.height,\r\n              transform: `scale(${calculateScale()})`\r\n            }}\r\n          >\r\n            <img\r\n              src={photo}\r\n              alt=\"\"\r\n              className=\"item-crop-img\"\r\n              style={{ top: crop.y * -1, left: crop.x * -1 }}\r\n            />\r\n          </div>\r\n        )}\r\n        {!photo && content}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nGridItem.propTypes = {\r\n  margin: PropTypes.number.isRequired,\r\n  width: PropTypes.number.isRequired,\r\n  height: PropTypes.number.isRequired,\r\n  content: PropTypes.string,\r\n  srcPhoto: PropTypes.string,\r\n  srcCrop: PropTypes.oneOf([null, PropTypes.object]),\r\n  onPhotoLoad: PropTypes.func\r\n};\r\n\r\nGridItem.defaultProps = {\r\n  margin: 0,\r\n  width: 10,\r\n  height: 10\r\n};\r\n\r\nexport default GridItem;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Muuri from \"muuri\";\r\nimport html2canvas from \"html2canvas\";\r\n\r\nimport GridItem from \"../GridItem\";\r\n\r\nimport \"./style.scss\";\r\n\r\nconst Grid = ({\r\n  cols,\r\n  margin,\r\n  width,\r\n  height,\r\n  colorBackground,\r\n  items,\r\n  render,\r\n  srcPhotos,\r\n  onRenderComplete,\r\n  onPhotosChanged\r\n}) => {\r\n  // params\r\n  const [colsVal, setColsVal] = useState(cols);\r\n  const [marginVal, setMarginVal] = useState(margin);\r\n  const [widthVal, setWidthVal] = useState(width);\r\n  const [heightVal, setHeightVal] = useState(height);\r\n  const [itemsVal, setItemsVal] = useState(items);\r\n  const [colorBackgroundVal, setcolorBackgroundVal] = useState(colorBackground);\r\n  const [photos, setPhotos] = useState(srcPhotos);\r\n\r\n  useEffect(() => {\r\n    setColsVal(cols);\r\n    refreshLayout();\r\n  }, [cols]);\r\n\r\n  useEffect(() => {\r\n    setMarginVal(margin);\r\n    refreshLayout();\r\n  }, [margin]);\r\n\r\n  useEffect(() => {\r\n    setWidthVal(width);\r\n    refreshLayout();\r\n  }, [width]);\r\n\r\n  useEffect(() => {\r\n    setHeightVal(height);\r\n    refreshLayout();\r\n  }, [height]);\r\n\r\n  useEffect(() => {\r\n    setItemsVal(items);\r\n\r\n    setTimeout(() => {\r\n      const tmpItems = [];\r\n      if (items > itemsVal) {\r\n        for (let i = itemsVal; i < items; i += 1) {\r\n          tmpItems.push(gridWrap.current.children[i]);\r\n        }\r\n        grid.current.add(tmpItems);\r\n      } else {\r\n        refreshLayout();\r\n      }\r\n    }, 0);\r\n  }, [items, itemsVal]);\r\n\r\n  useEffect(() => setcolorBackgroundVal(colorBackground), [colorBackground]);\r\n\r\n  const refreshLayout = () => {\r\n    if (typeof grid.current !== \"undefined\") {\r\n      setTimeout(() => {\r\n        grid.current.refreshItems();\r\n        grid.current.layout();\r\n      }, 0);\r\n    }\r\n  };\r\n\r\n  const handleWindowDrop = event => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  // muuri set\r\n  const grid = useRef();\r\n  const gridWrap = useRef();\r\n  const gridOuter = useRef();\r\n\r\n  useEffect(() => {\r\n    grid.current = new Muuri(gridWrap.current, {\r\n      dragEnabled: true,\r\n      dragPlaceholder: {\r\n        enabled: true,\r\n        duration: 400,\r\n        createElement: function(item) {\r\n          return item.getElement().cloneNode(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    // reload dom after sort\r\n    grid.current.on(\"dragReleaseEnd\", () => grid.current.synchronize());\r\n\r\n    // prevent default drop event\r\n    window.addEventListener(\"dragover\", handleWindowDrop);\r\n    window.addEventListener(\"drop\", handleWindowDrop);\r\n\r\n    return () => {\r\n      grid.current.destroy();\r\n      window.removeEventListener(\"dragover\", handleWindowDrop);\r\n      window.removeEventListener(\"drop\", handleWindowDrop);\r\n    };\r\n  }, []);\r\n\r\n  // render\r\n  useEffect(() => {\r\n    if (!render) return;\r\n\r\n    html2canvas(gridOuter.current).then(canvas => {\r\n      /* const a = document.createElement(\"a\");\r\n      a.href = canvas\r\n        .toDataURL(\"image/jpeg\")\r\n        .replace(\"image/jpeg\", \"image/octet-stream\");\r\n      a.download = `mossaiq.jpg`;\r\n      a.click(); */\r\n\r\n      onRenderComplete(canvas);\r\n    });\r\n  }, [render, onRenderComplete]);\r\n\r\n  const handlePhotoLoad = (photo, crop, idx) => {\r\n    const newPhotos = [...photos];\r\n    newPhotos[idx] = {\r\n      photo,\r\n      crop\r\n    };\r\n\r\n    setPhotos(newPhotos);\r\n    onPhotosChanged(newPhotos);\r\n  };\r\n\r\n  // prepare boxes\r\n  const boxes = [...Array(itemsVal).keys()].map(item => (\r\n    <GridItem\r\n      key={item}\r\n      width={widthVal}\r\n      height={heightVal}\r\n      margin={marginVal}\r\n      content={`${item + 1}`}\r\n      srcPhoto={photos[item] ? photos[item].photo : null}\r\n      srcCrop={photos[item] ? photos[item].crop : null}\r\n      onPhotoLoad={(photo, crop) => handlePhotoLoad(photo, crop, item)}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        ref={gridOuter}\r\n        className=\"grid-outer\"\r\n        style={{\r\n          width: colsVal * widthVal + colsVal * marginVal + marginVal,\r\n          paddingTop: marginVal,\r\n          paddingLeft: marginVal,\r\n          background: colorBackgroundVal\r\n        }}\r\n      >\r\n        <div className=\"grid\" ref={gridWrap}>\r\n          {boxes}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nGrid.propTypes = {\r\n  cols: PropTypes.number.isRequired,\r\n  margin: PropTypes.number.isRequired,\r\n  width: PropTypes.number.isRequired,\r\n  height: PropTypes.number.isRequired,\r\n  items: PropTypes.number.isRequired,\r\n  colorBackground: PropTypes.string.isRequired,\r\n  render: PropTypes.bool,\r\n  srcPhotos: PropTypes.array,\r\n  onRenderComplete: PropTypes.func,\r\n  onPhotosChanged: PropTypes.func\r\n};\r\n\r\nGrid.defaultProps = {\r\n  cols: 1,\r\n  margin: 0,\r\n  width: 10,\r\n  height: 10,\r\n  items: 0,\r\n  colorBackground: \"#ddd\",\r\n  render: false,\r\n  srcPhotos: [],\r\n  onRenderComplete: () => {},\r\n  onPhotosChanged: () => {}\r\n};\r\n\r\nexport default Grid;\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport default makeStyles(theme => ({\r\n  slider: {\r\n    marginBottom: theme.spacing(1)\r\n  },\r\n  formControl: {\r\n    marginBottom: theme.spacing(4),\r\n    width: \"100%\"\r\n  }\r\n}));\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport { CirclePicker } from \"react-color\";\r\n\r\nimport useStyles from \"./styles\";\r\n\r\nconst defaultColor = \"#fff\";\r\nconst sliders = [\r\n  {\r\n    label: \"columns\",\r\n    name: \"cols\",\r\n    min: 1,\r\n    max: 10,\r\n    default: 4,\r\n    unit: \"px\"\r\n  },\r\n  {\r\n    label: \"margins\",\r\n    name: \"margin\",\r\n    min: 0,\r\n    max: 50,\r\n    default: 10,\r\n    unit: \"px\"\r\n  },\r\n  {\r\n    label: \"box-width\",\r\n    name: \"width\",\r\n    min: 50,\r\n    max: 500,\r\n    default: 100,\r\n    unit: \"px\"\r\n  },\r\n  {\r\n    label: \"box-height\",\r\n    name: \"height\",\r\n    min: 50,\r\n    max: 500,\r\n    default: 100,\r\n    unit: \"px\"\r\n  },\r\n  {\r\n    label: \"items-count\",\r\n    name: \"items\",\r\n    min: 1,\r\n    max: 50,\r\n    default: 8,\r\n    unit: \"\"\r\n  }\r\n];\r\n\r\nconst presets = [\r\n  {\r\n    name: \"120 x 600\",\r\n    values: { margin: 5, cols: 1, width: 110, height: 144, items: 4 }\r\n  },\r\n  {\r\n    name: \"300 x 250\",\r\n    values: { margin: 5, cols: 2, width: 142, height: 118, items: 4 }\r\n  },\r\n  {\r\n    name: \"300 x 600\",\r\n    values: { margin: 7, cols: 2, width: 140, height: 141, items: 8 }\r\n  },\r\n  {\r\n    name: \"750 x 100\",\r\n    values: { margin: 5, cols: 5, width: 144, height: 90, items: 5 }\r\n  },\r\n  {\r\n    name: \"750 x 200\",\r\n    values: { margin: 5, cols: 5, width: 144, height: 190, items: 5 }\r\n  }\r\n];\r\n\r\nconst GridConfig = ({ onValuesChanged = () => {} }) => {\r\n  const classes = useStyles();\r\n\r\n  // preset\r\n  const [valPreset, setValPreset] = useState(\"\");\r\n\r\n  const handleChangePreset = e => {\r\n    const val = e.target.value;\r\n    setValPreset(val);\r\n    setValSliders({ ...valSliders, ...presets[val].values });\r\n  };\r\n\r\n  // slides\r\n  const defaultValSliders = Object.fromEntries(\r\n    sliders.map(slider => [slider.name, slider.default])\r\n  );\r\n  const [valSliders, setValSliders] = useState(defaultValSliders);\r\n\r\n  const handleChangeSlider = (value, name) => {\r\n    if (valSliders[name] === value) return;\r\n\r\n    setValPreset(\"\");\r\n    setValSliders({ ...valSliders, [name]: value });\r\n  };\r\n\r\n  // colorpicker\r\n  const [valColor, setValCoolor] = useState(defaultColor);\r\n\r\n  // push changed values outside\r\n  useEffect(() => {\r\n    onValuesChanged({ ...valSliders, colorBackground: valColor });\r\n  }, [valSliders, valColor, onValuesChanged]);\r\n\r\n  return (\r\n    <>\r\n      <FormControl className={classes.formControl}>\r\n        <InputLabel id=\"select-preset-label\">\r\n          <FormattedMessage id=\"grid-config.presets\" />\r\n        </InputLabel>\r\n        <Select\r\n          labelId=\"select-preset-label\"\r\n          id=\"select-preset\"\r\n          value={valPreset}\r\n          onChange={handleChangePreset}\r\n        >\r\n          {presets.map((preset, idx) => (\r\n            <MenuItem key={idx} value={idx}>\r\n              {preset.name}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n\r\n      {sliders.map(slider => (\r\n        <div className={classes.slider} key={slider.name}>\r\n          <InputLabel>\r\n            <FormattedMessage id={`grid-config.${slider.label}`} />\r\n          </InputLabel>\r\n          <Slider\r\n            value={valSliders[slider.name]}\r\n            aria-labelledby=\"discrete-slider\"\r\n            step={1}\r\n            name={slider.name}\r\n            min={slider.min}\r\n            max={slider.max}\r\n            valueLabelDisplay=\"auto\"\r\n            onChange={(e, val) => handleChangeSlider(val, slider.name)}\r\n            marks={[\r\n              { value: slider.min, label: `${slider.min} ${slider.unit}` },\r\n              { value: slider.max, label: `${slider.max} ${slider.unit}` }\r\n            ]}\r\n          />\r\n        </div>\r\n      ))}\r\n\r\n      <InputLabel>\r\n        <FormattedMessage id=\"grid-config.color\" />\r\n      </InputLabel>\r\n      <br />\r\n      <CirclePicker\r\n        color={valColor}\r\n        width={\"100%\"}\r\n        circleSize={26}\r\n        onChange={color => setValCoolor(color.hex)}\r\n        colors={[\r\n          \"#f44336\",\r\n          \"#e91e63\",\r\n          \"#9c27b0\",\r\n          \"#673ab7\",\r\n          \"#3f51b5\",\r\n          \"#2196f3\",\r\n          \"#03a9f4\",\r\n          \"#00bcd4\",\r\n          \"#009688\",\r\n          \"#4caf50\",\r\n          \"#8bc34a\",\r\n          \"#cddc39\",\r\n          \"#ffeb3b\",\r\n          \"#ffc107\",\r\n          \"#ff9800\",\r\n          \"#ff5722\",\r\n          \"#795548\",\r\n          \"#607d8b\",\r\n          \"#ffffff\"\r\n        ]}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GridConfig;\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst drawerWidth = 350;\r\n\r\nexport default makeStyles(theme => ({\r\n  root: {\r\n    display: \"flex\"\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen\r\n    })\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen\r\n    }),\r\n    marginRight: drawerWidth\r\n  },\r\n  title: {\r\n    flexGrow: 1\r\n  },\r\n  hide: {\r\n    display: \"none\"\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth\r\n  },\r\n  drawerHeader: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    padding: theme.spacing(0, 1),\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: \"flex-start\"\r\n  },\r\n  drawerBody: {\r\n    overflowY: \"auto\",\r\n    padding: 25\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen\r\n    }),\r\n    marginRight: -drawerWidth\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen\r\n    }),\r\n    marginRight: 0\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: \"#fff\"\r\n  }\r\n}));\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Tooltip, IconButton } from \"@material-ui/core\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport ArrowLeftIcon from \"@material-ui/icons/ArrowLeft\";\r\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport FileCopyIcon from \"@material-ui/icons/FileCopy\";\r\n\r\nimport \"./style.scss\";\r\n\r\nconst SlideSwitcher = ({\r\n  currentSlide,\r\n  countAllSlides,\r\n  onAdd,\r\n  onCopy,\r\n  onDelete,\r\n  onNext,\r\n  onPrev\r\n}) => {\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <Tooltip title={<FormattedMessage id=\"slide.prev\" />}>\r\n        <span>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            disabled={currentSlide === 1}\r\n            onClick={onPrev}\r\n          >\r\n            <ArrowLeftIcon />\r\n          </IconButton>\r\n        </span>\r\n      </Tooltip>\r\n      {currentSlide} / {countAllSlides}\r\n      <Tooltip title={<FormattedMessage id=\"slide.next\" />}>\r\n        <span>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            disabled={countAllSlides === currentSlide}\r\n            onClick={onNext}\r\n          >\r\n            <ArrowRightIcon />\r\n          </IconButton>\r\n        </span>\r\n      </Tooltip>\r\n      <Tooltip title={<FormattedMessage id=\"slide.add\" />}>\r\n        <span>\r\n          <IconButton color=\"inherit\" onClick={onAdd}>\r\n            <AddIcon />\r\n          </IconButton>\r\n        </span>\r\n      </Tooltip>\r\n      <Tooltip title={<FormattedMessage id=\"slide.copy\" />}>\r\n        <span>\r\n          <IconButton color=\"inherit\" onClick={onCopy}>\r\n            <FileCopyIcon />\r\n          </IconButton>\r\n        </span>\r\n      </Tooltip>\r\n      <Tooltip title={<FormattedMessage id=\"slide.delete\" />}>\r\n        <span>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            disabled={countAllSlides === 1}\r\n            onClick={onDelete}\r\n          >\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </span>\r\n      </Tooltip>\r\n    </div>\r\n  );\r\n};\r\n\r\nSlideSwitcher.propTypes = {\r\n  currentSlide: PropTypes.number.isRequired,\r\n  countAllSlides: PropTypes.number.isRequired,\r\n  onAdd: PropTypes.func,\r\n  onCopy: PropTypes.func,\r\n  onDelete: PropTypes.func,\r\n  onNext: PropTypes.func,\r\n  onPrev: PropTypes.func\r\n};\r\n\r\nSlideSwitcher.defaultProps = {\r\n  currentSlide: 1,\r\n  countAllSlides: 1\r\n};\r\n\r\nexport default SlideSwitcher;\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport clsx from \"clsx\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloudDownloadIcon from \"@material-ui/icons/CloudDownload\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nimport Grid from \"./components/Grid\";\r\nimport GridConfig from \"./components/GridConfig\";\r\n\r\nimport useStyles from \"./App.styles\";\r\nimport SlideSwitcher from \"./components/SlideSwitcher\";\r\nimport { Backdrop, CircularProgress } from \"@material-ui/core\";\r\n\r\nconst GIFEncoder = require(\"gifencoder\");\r\n\r\nconst shallowCompare = (obj1, obj2) =>\r\n  Object.keys(obj1).length === Object.keys(obj2).length &&\r\n  Object.keys(obj1).every(key => obj1[key] === obj2[key]);\r\n\r\nconst SlideGrid = React.memo(\r\n  ({ gridConfig, render, photos, onRenderComplete, onPhotosChanged }) => {\r\n    return (\r\n      <Grid\r\n        {...gridConfig}\r\n        render={render}\r\n        srcPhotos={photos}\r\n        onRenderComplete={onRenderComplete}\r\n        onPhotosChanged={onPhotosChanged}\r\n      />\r\n    );\r\n  },\r\n  (prevProps, nextProps) => {\r\n    return (\r\n      prevProps.render === nextProps.render &&\r\n      shallowCompare(prevProps.gridConfig, nextProps.gridConfig)\r\n    );\r\n  }\r\n);\r\n\r\nconst App = () => {\r\n  const classes = useStyles();\r\n\r\n  // drawer\r\n  const [open, setOpen] = useState(false);\r\n  const handleDrawerOpen = () => setOpen(true);\r\n  const handleDrawerClose = () => setOpen(false);\r\n\r\n  // render\r\n  const [render, setRender] = useState(false);\r\n  const [renderedItems, setRenderedItems] = useState([]);\r\n\r\n  // grid config\r\n  const [gridConfig, setGridConfig] = useState({});\r\n  const [gridPhotos, setGridPhotos] = useState({});\r\n  const [lastClonedId, setLastClonedId] = useState(\"\");\r\n\r\n  // slide switcher\r\n  const [currentSlide, setCurrentSlide] = useState(1);\r\n  const [allSlides, setAllSlides] = useState(1);\r\n  const [slidesMapping, setSlidesMapping] = useState([`id-${Date.now()}`]);\r\n\r\n  const handleSlideAdd = () => {\r\n    setAllSlides(allSlides + 1);\r\n    setSlidesMapping([...slidesMapping, `id-${Date.now()}`]);\r\n  };\r\n\r\n  const handleSlideCopy = () => {\r\n    const id = slidesMapping[currentSlide - 1];\r\n    const newId = `id-${Date.now()}`;\r\n\r\n    if (gridPhotos[id]) {\r\n      const newPhotos = { ...gridPhotos, [newId]: gridPhotos[id] };\r\n      setGridPhotos(newPhotos);\r\n    }\r\n\r\n    setLastClonedId(newId);\r\n  };\r\n\r\n  const insertClonedSlide = useCallback(() => {\r\n    if (lastClonedId) {\r\n      setAllSlides(allSlides + 1);\r\n      setSlidesMapping([...slidesMapping, lastClonedId]);\r\n    }\r\n  }, [allSlides, lastClonedId, slidesMapping]);\r\n\r\n  useEffect(insertClonedSlide, [lastClonedId]);\r\n\r\n  const handleSlideDelete = () => {\r\n    setSlidesMapping(\r\n      slidesMapping.filter(slide => slide !== slidesMapping[currentSlide - 1])\r\n    );\r\n\r\n    if (allSlides === currentSlide) {\r\n      setCurrentSlide(currentSlide - 1);\r\n    }\r\n\r\n    setAllSlides(allSlides - 1);\r\n  };\r\n\r\n  const handleSlidePrev = () => {\r\n    setCurrentSlide(currentSlide - 1);\r\n  };\r\n\r\n  const handleSlideNext = () => {\r\n    setCurrentSlide(currentSlide + 1);\r\n  };\r\n\r\n  const handlePhotosChanged = (photos, slideId) => {\r\n    setGridPhotos(currentPhotos => ({ ...currentPhotos, [slideId]: photos }));\r\n  };\r\n\r\n  const handleRenderComplete = (canvas, idx) => {\r\n    setRenderedItems(items => [...items, canvas]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (renderedItems.length > 0 && renderedItems.length === allSlides) {\r\n      const { width, height } = renderedItems[0];\r\n      const encoder = new GIFEncoder(width, height);\r\n\r\n      encoder.setRepeat(0);\r\n      encoder.setDelay(1000);\r\n\r\n      encoder.start();\r\n      renderedItems.forEach(item => encoder.addFrame(item.getContext(\"2d\")));\r\n      encoder.finish();\r\n\r\n      const templink = document.createElement(\"a\");\r\n      templink.download = `${width}x${height}.gif`;\r\n      templink.href = URL.createObjectURL(\r\n        new Blob([new Uint8Array(encoder.out.data)], { type: \"image/gif\" })\r\n      );\r\n      templink.click();\r\n\r\n      setRender(false);\r\n      setRenderedItems([]);\r\n    }\r\n  }, [renderedItems, allSlides]);\r\n\r\n  // slides\r\n  const slides = slidesMapping.map((id, idx) => {\r\n    const style =\r\n      idx + 1 === currentSlide || render\r\n        ? {}\r\n        : { position: \"absolute\", visibility: \"hidden\", pointerEvents: \"none\" };\r\n    //const style = { display: idx + 1 === currentSlide ? \"block\" : \"none\" };\r\n    //const style = { opacity: idx + 1 === currentSlide ? 1 : 0.4 };\r\n    return (\r\n      <div style={style} key={id}>\r\n        <SlideGrid\r\n          gridConfig={gridConfig}\r\n          render={render}\r\n          onRenderComplete={canvas => handleRenderComplete(canvas, idx)}\r\n          photos={gridPhotos[id] || []}\r\n          onPhotosChanged={photos => handlePhotosChanged(photos, id)}\r\n        />\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open\r\n        })}\r\n      >\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" noWrap className={classes.title}>\r\n            MossaIQ\r\n          </Typography>\r\n          <SlideSwitcher\r\n            currentSlide={currentSlide}\r\n            countAllSlides={allSlides}\r\n            onAdd={handleSlideAdd}\r\n            onCopy={handleSlideCopy}\r\n            onDelete={handleSlideDelete}\r\n            onNext={handleSlideNext}\r\n            onPrev={handleSlidePrev}\r\n          />\r\n          <Tooltip title={<FormattedMessage id=\"app.render\" />}>\r\n            <span>\r\n              <IconButton\r\n                color=\"inherit\"\r\n                disabled={render > 0}\r\n                onClick={() => setRender(true)}\r\n                className={clsx(open && classes.hide)}\r\n              >\r\n                <CloudDownloadIcon />\r\n              </IconButton>\r\n            </span>\r\n          </Tooltip>\r\n          <Tooltip title={<FormattedMessage id=\"app.grid-config\" />}>\r\n            <span>\r\n              <IconButton\r\n                color=\"inherit\"\r\n                edge=\"end\"\r\n                disabled={render > 0}\r\n                onClick={handleDrawerOpen}\r\n                className={clsx(open && classes.hide)}\r\n              >\r\n                <SettingsIcon />\r\n              </IconButton>\r\n            </span>\r\n          </Tooltip>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Backdrop className={classes.backdrop} open={render}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <main\r\n        className={clsx(classes.content, {\r\n          [classes.contentShift]: open\r\n        })}\r\n      >\r\n        <div className={classes.drawerHeader} />\r\n\r\n        {slides}\r\n      </main>\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"persistent\"\r\n        anchor=\"right\"\r\n        open={open}\r\n        classes={{\r\n          paper: classes.drawerPaper\r\n        }}\r\n      >\r\n        <div className={classes.drawerHeader}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <ChevronRightIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap>\r\n            <FormattedMessage id=\"app.grid-config\" />\r\n          </Typography>\r\n        </div>\r\n        <Divider />\r\n        <div className={classes.drawerBody}>\r\n          <GridConfig onValuesChanged={setGridConfig} />\r\n        </div>\r\n      </Drawer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { IntlProvider } from \"react-intl\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport messagesPl from \"./translations/pl.json\";\r\nimport messagesEn from \"./translations/en.json\";\r\n\r\nimport \"typeface-roboto\";\r\n\r\nconst defaultLang = \"en\";\r\nconst messages = {\r\n  pl: messagesPl,\r\n  en: messagesEn\r\n};\r\nconst language = navigator.language.split(/[-_]/)[0]; // language without region code\r\n\r\nReactDOM.render(\r\n  <IntlProvider\r\n    locale={language}\r\n    key={language}\r\n    messages={messages[language] || messages[defaultLang]}\r\n  >\r\n    <App />\r\n  </IntlProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}